import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:intl/intl.dart';
import '../../models/practitioner_model.dart';
import '../../models/therapy_session_model.dart';
import '../../models/task_reminder_model.dart';
import '../../models/patient_feedback_model.dart';
import '../../widgets/today_schedule_panel.dart';
import '../../widgets/patient_progress_widget.dart';
import '../../widgets/patient_feedback_panel.dart';
import '../../widgets/analytics_dashboard.dart';
import '../../widgets/task_reminder_panel.dart';
import '../../widgets/knowledge_hub_panel.dart';
import '../auth/login_screen_new.dart';
import 'appointments_screen.dart';
import 'patients_screen.dart';
import 'practitioner_profile_screen.dart';

class PractitionerHomeDashboard extends StatefulWidget {
  const PractitionerHomeDashboard({Key? key}) : super(key: key);

  @override
  _PractitionerHomeDashboardState createState() => _PractitionerHomeDashboardState();
}

class _PractitionerHomeDashboardState extends State<PractitionerHomeDashboard> {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  
  // Dashboard metrics
  int _totalPatients = 0;
  int _upcomingAppointments = 0;
  int _clearedAppointments = 0;
  double _satisfactionScore = 0.0;
  
  // Current practitioner data
  PractitionerModel? _practitionerData;
  bool _isLoading = true;
  int _selectedIndex = 0;
  bool _isDrawerOpen = false; // Track if drawer is open (for desktop layout)
  
  // Page controller for smooth transitions
  late PageController _pageController;
  
  // Navigation items
  final List<NavigationDestination> _navigationDestinations = [
    const NavigationDestination(
      icon: Icon(Icons.dashboard_outlined),
      selectedIcon: Icon(Icons.dashboard),
      label: 'Dashboard',
    ),
    const NavigationDestination(
      icon: Icon(Icons.people_outlined),
      selectedIcon: Icon(Icons.people),
      label: 'Patients',
    ),
    const NavigationDestination(
      icon: Icon(Icons.calendar_today_outlined),
      selectedIcon: Icon(Icons.calendar_today),
      label: 'Schedule',
    ),
    const NavigationDestination(
      icon: Icon(Icons.bar_chart_outlined),
      selectedIcon: Icon(Icons.bar_chart),
      label: 'Reports',
    ),
    const NavigationDestination(
      icon: Icon(Icons.settings_outlined),
      selectedIcon: Icon(Icons.settings),
      label: 'Settings',
    ),
  ];

  @override
  void initState() {
    super.initState();
    _pageController = PageController(initialPage: 0);
    _loadDashboardData();
  }
  
  @override
  void dispose() {
    _pageController.dispose();
    super.dispose();
  }

  Future<void> _loadDashboardData() async {
    try {
      setState(() {
        _isLoading = true;
      });
      
      // Get current user ID
      final User? user = _auth.currentUser;
      if (user == null) {
        // Handle not logged in
        return;
      }

      // Get practitioner data
      final practitionerDoc = await _firestore.collection('practitioners').doc(user.uid).get();
      if (practitionerDoc.exists) {
        Map<String, dynamic> data = practitionerDoc.data() as Map<String, dynamic>;
        
        setState(() {
          // Include uid in the data map before passing to fromJson
          data['uid'] = user.uid;
          _practitionerData = PractitionerModel.fromJson(data);
        });
      }

      // Get patients count
      final patientSnapshot = await _firestore.collection('patients').where('practitionerId', isEqualTo: user.uid).get();
      setState(() {
        _totalPatients = patientSnapshot.size;
      });

      // Get current date for appointments filtering
      final now = DateTime.now();
      final today = DateTime(now.year, now.month, now.day);
      
      // Query for upcoming appointments (where date >= today)
      final upcomingSnapshot = await _firestore
          .collection('appointments')
          .where('practitionerId', isEqualTo: user.uid)
          .where('date', isGreaterThanOrEqualTo: today)
          .where('status', isEqualTo: 'scheduled')
          .get();
      
      // Query for cleared appointments
      final clearedSnapshot = await _firestore
          .collection('appointments')
          .where('practitionerId', isEqualTo: user.uid)
          .where('status', isEqualTo: 'completed')
          .get();
      
      // Get average satisfaction score
      final feedbackSnapshot = await _firestore
          .collection('patient_feedback')
          .where('practitionerId', isEqualTo: user.uid)
          .get();
      
      double totalScore = 0;
      int validFeedbacks = 0;
      
      for (var doc in feedbackSnapshot.docs) {
        final data = doc.data();
        if (data['rating'] != null) {
          totalScore += (data['rating'] as num).toDouble();
          validFeedbacks++;
        }
      }
      
      setState(() {
        _upcomingAppointments = upcomingSnapshot.size;
        _clearedAppointments = clearedSnapshot.size;
        _satisfactionScore = validFeedbacks > 0 ? totalScore / validFeedbacks : 0.0;
        _isLoading = false;
      });
      
    } catch (e) {
      print('Error loading dashboard data: $e');
      setState(() {
        _isLoading = false;
      });
    }
  }

  // Sign out method
  Future<void> _signOut() async {
    try {
      await _auth.signOut();
      // Navigate to login screen
      if (mounted) {
        Navigator.of(context).pushAndRemoveUntil(
          MaterialPageRoute(builder: (context) => const LoginScreen()),
          (route) => false,
        );
      }
    } catch (e) {
      print('Error signing out: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Failed to sign out. Please try again.')),
      );
    }
  }
  
  // Show logout confirmation dialog
  Future<void> _showLogoutConfirmation() async {
    final result = await showDialog<bool>(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('Logout Confirmation'),
          content: const Text('Are you sure you want to logout?'),
          actions: <Widget>[
            TextButton(
              onPressed: () {
                Navigator.of(context).pop(false); // Cancel
              },
              child: const Text('Cancel'),
            ),
            TextButton(
              onPressed: () {
                Navigator.of(context).pop(true); // Confirm logout
              },
              style: TextButton.styleFrom(
                foregroundColor: Colors.red,
              ),
              child: const Text('Logout'),
            ),
          ],
        );
      },
    );
    
    if (result == true) {
      await _signOut();
    }
  }
  
  // Handle session status change
  void _handleSessionStatusChange(TherapySessionModel session, SessionStatus newStatus) {
    // Here you would update the session status in Firestore
    // For now, just show a success message
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Session ${session.id} updated to ${_getStatusText(newStatus)}'),
        backgroundColor: Theme.of(context).colorScheme.secondary,
      ),
    );
    
    // Refresh data
    _loadDashboardData();
  }
  
  // Handle session tapped
  void _handleSessionTap(TherapySessionModel session) {
    // Navigate to session details or patient details
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Viewing session details for ${session.patientName}'),
        duration: const Duration(seconds: 1),
      ),
    );
  }
  
  // Get status text helper
  String _getStatusText(SessionStatus status) {
    switch (status) {
      case SessionStatus.pending:
        return 'Pending';
      case SessionStatus.inProgress:
        return 'In Progress';
      case SessionStatus.completed:
        return 'Completed';
      case SessionStatus.cancelled:
        return 'Cancelled';
      default:
        return 'Unknown';
    }
  }
  
  // Handle loading state changes from widgets
  void _handleLoadingState(bool isLoading) {
    // Optional: implement global loading state if needed
  }
  
  // Handle feedback response
  void _handleFeedbackResponse(PatientFeedbackModel feedback) {
    // Navigate to feedback response screen or show dialog
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Responding to feedback from ${feedback.patientName}'),
        duration: const Duration(seconds: 1),
      ),
    );
  }
  
  // Handle adding a task
  void _handleAddTask() {
    // Show dialog to add new task
    TextEditingController taskController = TextEditingController();
    TextEditingController descController = TextEditingController();
    DateTime selectedDate = DateTime.now();
    
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('Add New Task'),
          content: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                TextField(
                  controller: taskController,
                  decoration: const InputDecoration(
                    labelText: 'Task Title',
                    hintText: 'Enter task title',
                  ),
                ),
                const SizedBox(height: 16),
                TextField(
                  controller: descController,
                  decoration: const InputDecoration(
                    labelText: 'Description',
                    hintText: 'Enter task description',
                  ),
                  maxLines: 3,
                ),
                const SizedBox(height: 16),
                ListTile(
                  title: const Text('Due Date'),
                  subtitle: Text(DateFormat('MMM d, yyyy').format(selectedDate)),
                  trailing: const Icon(Icons.calendar_today),
                  onTap: () async {
                    final DateTime? picked = await showDatePicker(
                      context: context,
                      initialDate: selectedDate,
                      firstDate: DateTime.now(),
                      lastDate: DateTime.now().add(const Duration(days: 365)),
                    );
                    if (picked != null) {
                      selectedDate = picked;
                    }
                  },
                ),
              ],
            ),
          ),
          actions: [
            TextButton(
              child: const Text('Cancel'),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
            TextButton(
              child: const Text('Add'),
              onPressed: () {
                // Add task to Firestore
                // For now, just close dialog
                Navigator.of(context).pop();
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('Task added successfully')),
                );
              },
            ),
          ],
        );
      },
    );
  }
  
  // Handle full progress view
  void _handleViewFullProgress() {
    // Navigate to full progress report
  }
  
  // Handle knowledge item selected
  void _handleKnowledgeItemSelected(KnowledgeItem item) {
    // Show knowledge item details
  }

  @override
  Widget build(BuildContext context) {
    // Check if we're on a tablet/desktop or mobile
    final screenWidth = MediaQuery.of(context).size.width;
    final bool isLargeScreen = screenWidth > 900;
    
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          'Aayur Sutra - Practitioner Dashboard',
          style: TextStyle(
            color: Colors.white,
            fontWeight: FontWeight.bold,
          ),
        ),
        backgroundColor: Theme.of(context).colorScheme.primary,
        actions: [
          IconButton(
            icon: const Icon(Icons.refresh, color: Colors.white),
            onPressed: _loadDashboardData,
            tooltip: 'Refresh',
          ),
          IconButton(
            icon: const Icon(Icons.notifications_outlined, color: Colors.white),
            onPressed: () {
              // Show notifications
            },
            tooltip: 'Notifications',
          ),
          IconButton(
            icon: const Icon(Icons.account_circle, color: Colors.white),
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => const PractitionerProfileScreen(),
                ),
              );
            },
            tooltip: 'Profile',
          ),
          IconButton(
            icon: const Icon(Icons.logout, color: Colors.white),
            onPressed: _showLogoutConfirmation,
            tooltip: 'Logout',
          ),
        ],
      ),
      // Use drawer for mobile and NavigationRail for tablets/desktops
      drawer: isLargeScreen ? null : _buildDrawer(),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : Row(
              children: [
                // Show NavigationRail only on larger screens
                if (isLargeScreen) _buildNavigationRail(),
                
                // Main content area
                Expanded(
                  child: _buildDashboardContent(),
                ),
              ],
            ),
    );
  }
  
  Widget _buildNavigationRail() {
    return NavigationRail(
      selectedIndex: _selectedIndex,
      groupAlignment: -1.0,
      onDestinationSelected: (int index) {
        setState(() {
          _selectedIndex = index;
        });
        // Handle navigation based on selected index
        _handleNavigation(index);
      },
      labelType: NavigationRailLabelType.all,
      destinations: _navigationDestinations.map((destination) {
        return NavigationRailDestination(
          icon: destination.icon,
          selectedIcon: destination.selectedIcon,
          label: Text(destination.label),
        );
      }).toList(),
    );
  }
  
  Widget _buildDrawer() {
    return Drawer(
      child: Column(
        children: [
          UserAccountsDrawerHeader(
            accountName: Text(
              _practitionerData?.fullName ?? 'Practitioner',
              style: const TextStyle(
                fontWeight: FontWeight.bold,
              ),
            ),
            accountEmail: Text(_practitionerData?.email ?? ''),
            currentAccountPicture: CircleAvatar(
              backgroundColor: Colors.white,
              child: Text(
                _practitionerData?.fullName?.substring(0, 1).toUpperCase() ?? 'P',
                style: TextStyle(
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                  color: Theme.of(context).colorScheme.primary,
                ),
              ),
            ),
            decoration: BoxDecoration(
              color: Theme.of(context).colorScheme.primary,
            ),
          ),
          Expanded(
            child: ListView.builder(
              itemCount: _navigationDestinations.length,
              itemBuilder: (context, index) {
                final destination = _navigationDestinations[index];
                return ListTile(
                  leading: _selectedIndex == index
                    ? destination.selectedIcon
                    : destination.icon,
                  title: Text(destination.label),
                  selected: _selectedIndex == index,
                  onTap: () {
                    setState(() {
                      _selectedIndex = index;
                    });
                    Navigator.pop(context); // Close drawer
                    _handleNavigation(index);
                  },
                );
              },
            ),
          ),
          const Divider(),
          ListTile(
            leading: const Icon(Icons.logout, color: Colors.red),
            title: const Text('Logout'),
            onTap: () {
              Navigator.pop(context); // Close drawer
              _showLogoutConfirmation();
            },
          ),
        ],
      ),
    );
  }
  
  void _handleNavigation(int index) {
    switch (index) {
      case 0: // Dashboard - already on dashboard
        break;
      case 1: // Patients
        Navigator.push(
          context,
          MaterialPageRoute(builder: (context) => const PatientsScreen()),
        );
        break;
      case 2: // Schedule
        Navigator.push(
          context,
          MaterialPageRoute(builder: (context) => const AppointmentsScreen()),
        );
        break;
      case 3: // Reports
        // Navigate to reports screen when implemented
        break;
      case 4: // Settings
        // Navigate to settings screen when implemented
        break;
    }
  }
  
  Widget _buildDashboardContent() {
    if (_practitionerData == null) {
      return const Center(
        child: Text('Error loading practitioner data. Please try again later.'),
      );
    }
    
    return SingleChildScrollView(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Welcome header
            _buildWelcomeHeader(),
            
            const SizedBox(height: 24),
            
            // Summary cards
            _buildSummaryCards(),
            
            const SizedBox(height: 24),
            
            // Today's Schedule
            TodaySchedulePanel(
              practitionerId: _practitionerData!.uid,
              onSessionTap: _handleSessionTap,
              onStatusChange: _handleSessionStatusChange,
              onLoadingStateChanged: _handleLoadingState,
            ),
            
            const SizedBox(height: 24),
            
            // Patient Progress Tracker and Patient Feedback in a row for larger screens
            LayoutBuilder(
              builder: (context, constraints) {
                if (constraints.maxWidth > 700) {
                  return Row(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Expanded(
                        flex: 3,
                        child: _practitionerData != null ? PatientProgressWidget(
                          patientId: 'latest', // This should be replaced with actual patient ID
                          patientName: 'Current Patient',
                          onViewFullProgress: _handleViewFullProgress,
                        ) : const SizedBox(),
                      ),
                      const SizedBox(width: 16),
                      Expanded(
                        flex: 2,
                        child: _practitionerData != null ? PatientFeedbackPanel(
                          practitionerId: _practitionerData!.uid,
                          onRespondToFeedback: _handleFeedbackResponse,
                        ) : const SizedBox(),
                      ),
                    ],
                  );
                } else {
                  // Stack them vertically on smaller screens
                  return Column(
                    children: [
                      _practitionerData != null ? PatientProgressWidget(
                        patientId: 'latest', // This should be replaced with actual patient ID
                        patientName: 'Current Patient',
                        onViewFullProgress: _handleViewFullProgress,
                      ) : const SizedBox(),
                      
                      const SizedBox(height: 24),
                      
                      _practitionerData != null ? PatientFeedbackPanel(
                        practitionerId: _practitionerData!.uid,
                        onRespondToFeedback: _handleFeedbackResponse,
                      ) : const SizedBox(),
                    ],
                  );
                }
              },
            ),
            
            const SizedBox(height: 24),
            
            // Analytics Dashboard and Task Reminder in a row for larger screens
            LayoutBuilder(
              builder: (context, constraints) {
                if (constraints.maxWidth > 700) {
                  return Row(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Expanded(
                        flex: 3,
                        child: _practitionerData != null ? AnalyticsDashboard(
                          practitionerId: _practitionerData!.uid,
                        ) : const SizedBox(),
                      ),
                      const SizedBox(width: 16),
                      Expanded(
                        flex: 2,
                        child: _practitionerData != null ? TaskReminderPanel(
                          practitionerId: _practitionerData!.uid,
                          onAddTask: _handleAddTask,
                        ) : const SizedBox(),
                      ),
                    ],
                  );
                } else {
                  // Stack them vertically on smaller screens
                  return Column(
                    children: [
                      _practitionerData != null ? AnalyticsDashboard(
                        practitionerId: _practitionerData!.uid,
                      ) : const SizedBox(),
                      
                      const SizedBox(height: 24),
                      
                      _practitionerData != null ? TaskReminderPanel(
                        practitionerId: _practitionerData!.uid,
                        onAddTask: _handleAddTask,
                      ) : const SizedBox(),
                    ],
                  );
                }
              },
            ),
            
            const SizedBox(height: 24),
            
            // Knowledge Hub
            KnowledgeHubPanel(
              onItemSelected: _handleKnowledgeItemSelected,
            ),
            
            const SizedBox(height: 32),
          ],
        ),
      ),
    );
  }

  Widget _buildWelcomeHeader() {
    // Get time of day greeting
    final hour = DateTime.now().hour;
    String greeting = "Good Morning";
    if (hour >= 12 && hour < 17) {
      greeting = "Good Afternoon";
    } else if (hour >= 17) {
      greeting = "Good Evening";
    }
    
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Theme.of(context).colorScheme.primary,
        borderRadius: BorderRadius.circular(12),
      ),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Avatar or Icon
          CircleAvatar(
            radius: 32,
            backgroundColor: Colors.white,
            child: Text(
              _practitionerData?.fullName?.substring(0, 1).toUpperCase() ?? 'P',
              style: TextStyle(
                fontSize: 28,
                fontWeight: FontWeight.bold,
                color: Theme.of(context).colorScheme.primary,
              ),
            ),
          ),
          const SizedBox(width: 16),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  '$greeting, Dr. ${_practitionerData?.fullName ?? "Practitioner"}',
                  style: const TextStyle(
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                ),
                const SizedBox(height: 8),
                if (_practitionerData?.specialties != null && _practitionerData!.specialties.isNotEmpty)
                  Text(
                    'Specialties: ${_practitionerData!.specialties.join(", ")}',
                    style: const TextStyle(
                      fontSize: 14,
                      color: Colors.white70,
                    ),
                  ),
                const SizedBox(height: 16),
                Text(
                  DateFormat('EEEE, MMMM d, yyyy').format(DateTime.now()),
                  style: const TextStyle(
                    fontSize: 14,
                    color: Colors.white70,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSummaryCards() {
    return GridView.count(
      crossAxisCount: MediaQuery.of(context).size.width > 900 ? 4 : 
                    MediaQuery.of(context).size.width > 600 ? 2 : 1,
      crossAxisSpacing: 16,
      mainAxisSpacing: 16,
      shrinkWrap: true,
      physics: const NeverScrollableScrollPhysics(),
      children: [
        _buildSummaryCard(
          'Patients Today',
          _totalPatients.toString(),
          Icons.people,
          Colors.blue,
          'View all patients',
          () {
            Navigator.push(
              context,
              MaterialPageRoute(builder: (context) => const PatientsScreen()),
            );
          },
        ),
        _buildSummaryCard(
          'Upcoming Appointments',
          _upcomingAppointments.toString(),
          Icons.calendar_today,
          Colors.orange,
          'View schedule',
          () {
            Navigator.push(
              context,
              MaterialPageRoute(builder: (context) => const AppointmentsScreen()),
            );
          },
        ),
        _buildSummaryCard(
          'Completed Sessions',
          _clearedAppointments.toString(),
          Icons.check_circle,
          Colors.green,
          'View history',
          () {
            // Navigate to history/reports
          },
        ),
        _buildSummaryCard(
          'Satisfaction Score',
          '${(_satisfactionScore * 20).toStringAsFixed(1)}%',
          Icons.star,
          Colors.amber,
          'View feedback',
          () {
            // Navigate to feedback section
          },
        ),
      ],
    );
  }

  Widget _buildSummaryCard(
    String title, 
    String value, 
    IconData icon, 
    Color color, 
    String actionText, 
    VoidCallback onAction,
  ) {
    return Card(
      elevation: 2,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(icon, color: color, size: 28),
                const Spacer(),
                PopupMenuButton<String>(
                  icon: const Icon(Icons.more_vert, size: 20),
                  onSelected: (value) {
                    if (value == 'action') {
                      onAction();
                    }
                  },
                  itemBuilder: (context) => [
                    PopupMenuItem(
                      value: 'action',
                      child: Text(actionText),
                    ),
                  ],
                ),
              ],
            ),
            const SizedBox(height: 12),
            Text(
              value,
              style: const TextStyle(
                fontSize: 28,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 4),
            Text(
              title,
              style: TextStyle(
                fontSize: 14,
                color: Colors.grey[600],
              ),
            ),
            const Spacer(),
            TextButton(
              onPressed: onAction,
              style: TextButton.styleFrom(
                padding: EdgeInsets.zero,
                alignment: Alignment.centerLeft,
              ),
              child: Row(
                children: [
                  Text(
                    actionText,
                    style: TextStyle(
                      color: color,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(width: 4),
                  Icon(Icons.arrow_forward, size: 16, color: color),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// Custom class for navigation destinations
class NavigationDestination {
  final Widget icon;
  final Widget selectedIcon;
  final String label;

  const NavigationDestination({
    required this.icon,
    required this.selectedIcon,
    required this.label,
  });
}

// Knowledge item model for the KnowledgeHubPanel
class KnowledgeItem {
  final String id;
  final String title;
  final String category;
  final String summary;
  final DateTime publishedDate;
  final String author;

  KnowledgeItem({
    required this.id,
    required this.title,
    required this.category,
    required this.summary,
    required this.publishedDate,
    required this.author,
  });
}
